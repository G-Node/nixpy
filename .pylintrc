[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=

# Specify a score threshold to be exceeded before program exits with error.
fail-under=10.0

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=CVS

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=0

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable=all

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable=C0102,  # Black listed name "%s"**
       C0121,  # Missing required attribute "%s"**
       C0202,  # Class method %s should have cls as first argument**
       C0203,  # Metaclass method %s should have mcs as first argument**
       C0204,  # Metaclass class method %s should have %s as first argument**
       C0325,  # Unnecessary parens after %r keyword**
       E0011,  # Unrecognized file option %r**
       E0012,  # Bad option value %r**
       E0100,  # __init__ method is a generator**
       E0101,  # Explicit return in __init__**
       E0102,  # %s already defined line %s**
       E0103,  # %r not properly in loop**
       E0104,  # Return outside function**
       E0105,  # Yield outside function**
       E0106,  # Return with argument inside generator**
       E0107,  # Use of the non-existent %s operator**
       E0108,  # Duplicate argument name %s in function definition**
       E0202,  # An attribute affected in %s line %s hide this method**
       E0203,  # Access to member %r before its definition line %s**
       E0211,  # Method has no argument**
       E0213,  # Method should have "self" as first argument**
       # E0221,  # Interface resolved to %s is not a class**
       # E0222,  # Missing method %r from %s interface**
       E0235,  # __exit__ must accept 3 arguments: type, value, traceback**
       # E0501,  # Old: Non ascii characters found but no encoding specified (PEP 263)**
       # E0502,  # Old: Wrong encoding specified (%s)**
       # E0503,  # Old: Unknown encoding specified (%s)**
       E0601,  # Using variable %r before assignment**
       E0602,  # Undefined variable %r**
       E0603,  # Undefined variable name %r in __all__**
       E0604,  # Invalid object %r in __all__, must contain only strings**
       E0611,  # No name %r in module %r**
       E0701,  # Bad except clauses order (%s)**
       E0702,  # Raising %s while only classes, instances or string are allowed**
       E0710,  # Raising a new style class which doesn't inherit from BaseException**
       E0711,  # NotImplemented raised - should raise NotImplementedError**
       E0712,  # Catching an exception which doesn\'t inherit from BaseException: %s**
       # E1001,  # Use of __slots__ on an old style class**
       # E1002,  # Use of super on an old style class**
       E1003,  # Bad first argument %r given to super()**
       # E1004,  # Missing argument to super()**
       # E1101,  # %s %r has no %r member**  ## RE-ENABLE AFTER CODE RESTRUCTURING
       E1102,  # %s is not callable**
       # E1103,  # %s %r has no %r member (but some types could not be inferred)**  ## RE-ENABLE AFTER CODE RESTRUCTURING
       E1111,  # Assigning to function call which doesn't return**
       E1120,  # No value passed for parameter %s in function call**
       E1121,  # Too many positional arguments for function call**
       # E1122,  # Old: Duplicate keyword argument %r in function call**
       E1123,  # Passing unexpected keyword argument %r in function call**
       E1124,  # Parameter %r passed as both positional and keyword argument**
       E1125,  # Old: Missing mandatory keyword argument %r**
       E1200,  # Unsupported logging format character %r (%#02x) at index %d**
       E1201,  # Logging format string ends in middle of conversion specifier**
       E1205,  # Too many arguments for logging format string**
       E1206,  # Not enough arguments for logging format string**
       E1300,  # Unsupported format character %r (%#02x) at index %d**
       E1301,  # Format string ends in middle of conversion specifier**
       E1302,  # Mixing named and unnamed conversion specifiers in format string**
       E1303,  # Expected mapping for format string, not %s**
       E1304,  # Missing key %r in format string dictionary**
       E1305,  # Too many arguments for format string**
       E1306,  # Not enough arguments for format string**
       E1310,  # Suspicious argument in %s.%s call**
       W0101,  # Unreachable code**
       W0102,  # Dangerous default value %s as argument**
       W0104,  # Statement seems to have no effect**
       W0105,  # String statement has no effect**
       W0106,  # Expression "%s" is assigned to nothing**
       W0108,  # Lambda may not be necessary**
       W0109,  # Duplicate key %r in dictionary**
       W0120,  # Else clause on loop without a break statement**
       W0150,  # %s statement in finally block may swallow exception**
       W0201,  # Attribute %r defined outside __init__**
       W0211,  # Static method with %r as first argument**
       # W0221,  # Arguments number differs from %s method**  ## RE-ENABLE AFTER CODE RESTRUCTURING
       # W0222,  # Signature differs from %s method**  ## RE-ENABLE AFTER CODE RESTRUCTURING
       W0223,  # Method %r is abstract in class %r but is not overridden**
       W0234,  # iter returns non-iterator**
       W0301,  # Unnecessary semicolon**
       W0311,  # Bad indentation. Found %s %s, expected %s**
       # W0312,  # Found indentation with %ss instead of %ss**
       # W0331,  # Use of the <> operator**
       W0402,  # Uses of a deprecated module %r**
       W0406,  # Module import itself**
       # W0512,  # Cannot decode using encoding "%s", unexpected byte at position %d**
       W0601,  # Global variable %r undefined at the module level**
       W0602,  # Using global for %r but no assigment is done**
       W0611,  # Unused import %s**
       W0612,  # Unused variable %r**
       W0613,  # Unused argument %r**
       W0614,  # Unused import %s from wildcard import**
       W0621,  # Redefining name %r from outer scope (line %s)**
       W0622,  # Redefining built-in %r**
       # W0623,  # Redefining name %r from %s in exception handler**
       W0631,  # Using possibly undefined loop variable %r**
       W0632,  # Possible unbalanced tuple unpacking with sequence%s: â€¦**
       W0633,  # Attempting to unpack a non-sequence%s**
       # W0701,  # Raising a string exception**
       # W0704,  # Except doesn't do anything**
       # W0710,  # Exception doesn't inherit from standard "Exception" class**
       W0711,  # Exception to catch is the result of a binary "%s" operation**
       # W0712,  # Implicit unpacking of exceptions is not supported in Python 3**
       W1111,  # Assigning to function call which only returns None**
       W1300,  # Format string dictionary key should be a string, not %s**
       W1301,  # Unused key %r in format string dictionary**
       W1401,  # Anomalous backslash in string: \'%s\'. String constant might be missing an r prefix.**
       W1402,  # Anomalous Unicode escape in byte string: \'%s\'. String constant might be missing an r or u prefix.**
       W1501,  # "%s" is not a valid mode for open.**


[REPORTS]

# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'error', 'warning', 'refactor', and 'convention'
# which contain the number of messages in each category, as well as 'statement'
# which is the total number of statements analyzed. This score is used by the
# global evaluation report (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
#msg-template=

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions=sys.exit


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Regular expression matching correct argument names. Overrides argument-
# naming-style.
#argument-rgx=

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Regular expression matching correct attribute names. Overrides attr-naming-
# style.
#attr-rgx=

# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata

# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
bad-names-rgxs=

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style.
#class-attribute-rgx=

# Naming style matching correct class names.
class-naming-style=PascalCase

# Regular expression matching correct class names. Overrides class-naming-
# style.
#class-rgx=

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Regular expression matching correct constant names. Overrides const-naming-
# style.
#const-rgx=

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style=snake_case

# Regular expression matching correct function names. Overrides function-
# naming-style.
#function-rgx=

# Good variable names which should always be accepted, separated by a comma.
good-names=i,
           j,
           k,
           ex,
           Run,
           _,
           nf,  # common for nix.File
           da,  # common for DataArray
           mt,  # common for MultiTag
           df,  # common for DataFrame
           dv,  # common for DataView
           dt,  # common for time difference/step
           id,  # entity id attribute

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
good-names-rgxs=

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style.
#inlinevar-rgx=

# Naming style matching correct method names.
method-naming-style=snake_case

# Regular expression matching correct method names. Overrides method-naming-
# style.
#method-rgx=

# Naming style matching correct module names.
module-naming-style=snake_case

# Regular expression matching correct module names. Overrides module-naming-
# style.
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes=abc.abstractproperty

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct variable names. Overrides variable-
# naming-style.
#variable-rgx=


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=120

# Maximum number of lines in a module.
max-module-lines=1000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no


[LOGGING]

# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style=old

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules=logging


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX,
      TODO

# Regular expression of note tags to take in consideration.
#notes-rgx=


[SIMILARITIES]

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no

# Minimum lines number of a similarity.
min-similarity-lines=4


[SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the python-enchant package.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains the private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words=no


[STRING]

# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency=no

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps=no


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis). It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1

# List of decorators that change the signature of a decorated function.
signature-mutators=


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,
          _cb

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
                      __new__,
                      setUp,
                      __post_init__

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=cls


[DESIGN]

# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of statements in function / method body.
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[IMPORTS]

# List of modules that can be imported at any level, not just the top level
# one.
allow-any-import-level=

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=optparse,tkinter.tix

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled).
ext-import-graph=

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled).
import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled).
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Couples of modules and preferred modules, separated by a comma.
preferred-modules=


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "BaseException, Exception".
overgeneral-exceptions=builtin.BaseException,
                       builtin.Exception
